name: Jest Coverage Comment
on:
  pull_request:
jobs:
  coverage2:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '14'

      - name: Install dependencies
        run: yarn install

      - name: Debugging - Check coverage directory
        run: |
          echo "Current directory: $(pwd)"
          echo "Contents of the current directory:"
          ls -la
          cd coverage
          echo "Current directory (coverage): $(pwd)"
          echo "Contents of the current directory (coverage):"
          ls -la

      - name: Extract coverage details
        id: extract-coverage
        run: |
          # Using the coverage-final.json file directly in the coverage directory
          COVERAGE_FILE="coverage/coverage-final.json"

          if [ -f "$COVERAGE_FILE" ]; then
            # Extract coverage metrics based on the format of the coverage-final.json file
            COVERAGE=$(node -e "const {total, covered} = require('$COVERAGE_FILE').total; console.log((covered / total * 100).toFixed(2))")

            # Generate coverage details in Markdown table format
            echo "File|% Stmts|% Branch|% Funcs|% Lines|Uncovered Line #s" > coverage-details.md

            node -e "const {files} = require('$COVERAGE_FILE'); Object.entries(files).forEach(([file, data]) => { console.log(\`\${file} \${data.statementMap ? data.statementMap.length : 0} \${data.branchMap ? data.branchMap.length : 0} \${data.fnMap ? data.fnMap.length : 0} \${data.lineMap ? data.lineMap.length : 0} \${data.statementMap ? Object.keys(data.statementMap).filter(line => !data.statementMap[line]).join(',') : ''}\`); })" \
            | sed 's|src/||' \
            | sed 's|/|/src/|' \
            | sed 's|/home/runner/work/app-end-to-end-testing/app-end-to-end-testing/||' \
            >> coverage-details.md

            echo "::set-output name=coverage::$COVERAGE"
            echo "::set-output name=coverage-details::$(cat coverage-details.md)"
          else
            echo "No coverage file found."
          fi

      - name: Display coverage details
        run: |
          echo "Coverage: ${{ needs.coverage.outputs.coverage }}%"
          echo "Coverage Details: ${{ needs.coverage.outputs.coverage-details }}" > coverage.txt

      - name: Comment on PR with coverage
        run: gh issue comment ${{ github.event.pull_request.number }} -b "$(cat coverage.txt)"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
